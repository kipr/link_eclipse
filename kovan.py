# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kovan', [dirname(__file__)])
        except ImportError:
            import _kovan
            return _kovan
        if fp is not None:
            try:
                _mod = imp.load_module('_kovan', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kovan = swig_import_helper()
    del swig_import_helper
else:
    import _kovan
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class IntSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_IntSensor
    __del__ = lambda self : None;
    def value(self): return _kovan.IntSensor_value(self)
IntSensor_swigregister = _kovan.IntSensor_swigregister
IntSensor_swigregister(IntSensor)

class ShortSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_ShortSensor
    __del__ = lambda self : None;
    def value(self): return _kovan.ShortSensor_value(self)
ShortSensor_swigregister = _kovan.ShortSensor_swigregister
ShortSensor_swigregister(ShortSensor)

class UnsignedShortSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedShortSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedShortSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_UnsignedShortSensor
    __del__ = lambda self : None;
    def value(self): return _kovan.UnsignedShortSensor_value(self)
UnsignedShortSensor_swigregister = _kovan.UnsignedShortSensor_swigregister
UnsignedShortSensor_swigregister(UnsignedShortSensor)

class BoolSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_BoolSensor
    __del__ = lambda self : None;
    def value(self): return _kovan.BoolSensor_value(self)
BoolSensor_swigregister = _kovan.BoolSensor_swigregister
BoolSensor_swigregister(BoolSensor)

class Motor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Motor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clearPositionCounter(self): return _kovan.Motor_clearPositionCounter(self)
    def moveAtVelocity(self, *args): return _kovan.Motor_moveAtVelocity(self, *args)
    def moveToPosition(self, *args): return _kovan.Motor_moveToPosition(self, *args)
    def moveRelativePosition(self, *args): return _kovan.Motor_moveRelativePosition(self, *args)
    def freeze(self): return _kovan.Motor_freeze(self)
    def isMotorDone(self): return _kovan.Motor_isMotorDone(self)
    def blockMotorDone(self): return _kovan.Motor_blockMotorDone(self)
    def forward(self): return _kovan.Motor_forward(self)
    def backward(self): return _kovan.Motor_backward(self)
    def motor(self, *args): return _kovan.Motor_motor(self, *args)
    def off(self): return _kovan.Motor_off(self)
    def port(self): return _kovan.Motor_port(self)
    def getPidGains(self): return _kovan.Motor_getPidGains(self)
    def setPidGains(self, *args): return _kovan.Motor_setPidGains(self, *args)
    __swig_destroy__ = _kovan.delete_Motor
    __del__ = lambda self : None;
Motor_swigregister = _kovan.Motor_swigregister
Motor_swigregister(Motor)

class BackEMF(IntSensor):
    __swig_setmethods__ = {}
    for _s in [IntSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackEMF, name, value)
    __swig_getmethods__ = {}
    for _s in [IntSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackEMF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_BackEMF(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self): return _kovan.BackEMF_value(self)
    def port(self): return _kovan.BackEMF_port(self)
    __swig_destroy__ = _kovan.delete_BackEMF
    __del__ = lambda self : None;
BackEMF_swigregister = _kovan.BackEMF_swigregister
BackEMF_swigregister(BackEMF)

class InvalidPort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_InvalidPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_InvalidPort
    __del__ = lambda self : None;
InvalidPort_swigregister = _kovan.InvalidPort_swigregister
InvalidPort_swigregister(InvalidPort)

class Segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _kovan.Segment_start_set
    __swig_getmethods__["start"] = _kovan.Segment_start_get
    if _newclass:start = _swig_property(_kovan.Segment_start_get, _kovan.Segment_start_set)
    __swig_setmethods__["end"] = _kovan.Segment_end_set
    __swig_getmethods__["end"] = _kovan.Segment_end_get
    if _newclass:end = _swig_property(_kovan.Segment_end_get, _kovan.Segment_end_set)
    __swig_setmethods__["startValue"] = _kovan.Segment_startValue_set
    __swig_getmethods__["startValue"] = _kovan.Segment_startValue_get
    if _newclass:startValue = _swig_property(_kovan.Segment_startValue_get, _kovan.Segment_startValue_set)
    __swig_setmethods__["endValue"] = _kovan.Segment_endValue_set
    __swig_getmethods__["endValue"] = _kovan.Segment_endValue_get
    if _newclass:endValue = _swig_property(_kovan.Segment_endValue_get, _kovan.Segment_endValue_set)
    def __init__(self): 
        this = _kovan.new_Segment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Segment
    __del__ = lambda self : None;
Segment_swigregister = _kovan.Segment_swigregister
Segment_swigregister(Segment)


def coalesceSegments(*args):
  return _kovan.coalesceSegments(*args)
coalesceSegments = _kovan.coalesceSegments
class IntSegmenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSegmenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSegmenter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def findSegments(self, *args): return _kovan.IntSegmenter_findSegments(self, *args)
    __swig_destroy__ = _kovan.delete_IntSegmenter
    __del__ = lambda self : None;
IntSegmenter_swigregister = _kovan.IntSegmenter_swigregister
IntSegmenter_swigregister(IntSegmenter)

class Servo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Servo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Servo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Servo(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPosition(self, *args): return _kovan.Servo_setPosition(self, *args)
    def position(self): return _kovan.Servo_position(self)
    def disable(self): return _kovan.Servo_disable(self)
    def enable(self): return _kovan.Servo_enable(self)
    def setEnabled(self, *args): return _kovan.Servo_setEnabled(self, *args)
    def isEnabled(self): return _kovan.Servo_isEnabled(self)
    __swig_destroy__ = _kovan.delete_Servo
    __del__ = lambda self : None;
Servo_swigregister = _kovan.Servo_swigregister
Servo_swigregister(Servo)

PI = _kovan.PI
class CreateScript(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateScript, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateScript, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_CreateScript(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args): return _kovan.CreateScript_append(self, *args)
    def remove(self, *args): return _kovan.CreateScript_remove(self, *args)
    def data(self): return _kovan.CreateScript_data(self)
    def size(self): return _kovan.CreateScript_size(self)
    def byte(self, *args): return _kovan.CreateScript_byte(self, *args)
    __swig_destroy__ = _kovan.delete_CreateScript
    __del__ = lambda self : None;
CreateScript_swigregister = _kovan.CreateScript_swigregister
CreateScript_swigregister(CreateScript)

class CreateState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _kovan.CreateState_timestamp_set
    __swig_getmethods__["timestamp"] = _kovan.CreateState_timestamp_get
    if _newclass:timestamp = _swig_property(_kovan.CreateState_timestamp_get, _kovan.CreateState_timestamp_set)
    __swig_setmethods__["distance"] = _kovan.CreateState_distance_set
    __swig_getmethods__["distance"] = _kovan.CreateState_distance_get
    if _newclass:distance = _swig_property(_kovan.CreateState_distance_get, _kovan.CreateState_distance_set)
    __swig_setmethods__["angle"] = _kovan.CreateState_angle_set
    __swig_getmethods__["angle"] = _kovan.CreateState_angle_get
    if _newclass:angle = _swig_property(_kovan.CreateState_angle_get, _kovan.CreateState_angle_set)
    __swig_setmethods__["radius"] = _kovan.CreateState_radius_set
    __swig_getmethods__["radius"] = _kovan.CreateState_radius_get
    if _newclass:radius = _swig_property(_kovan.CreateState_radius_get, _kovan.CreateState_radius_set)
    __swig_setmethods__["rightVelocity"] = _kovan.CreateState_rightVelocity_set
    __swig_getmethods__["rightVelocity"] = _kovan.CreateState_rightVelocity_get
    if _newclass:rightVelocity = _swig_property(_kovan.CreateState_rightVelocity_get, _kovan.CreateState_rightVelocity_set)
    __swig_setmethods__["leftVelocity"] = _kovan.CreateState_leftVelocity_set
    __swig_getmethods__["leftVelocity"] = _kovan.CreateState_leftVelocity_get
    if _newclass:leftVelocity = _swig_property(_kovan.CreateState_leftVelocity_get, _kovan.CreateState_leftVelocity_set)
    def __init__(self): 
        this = _kovan.new_CreateState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_CreateState
    __del__ = lambda self : None;
CreateState_swigregister = _kovan.CreateState_swigregister
CreateState_swigregister(CreateState)

class _1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bumpsAndWheelDrops"] = _kovan._1_bumpsAndWheelDrops_set
    __swig_getmethods__["bumpsAndWheelDrops"] = _kovan._1_bumpsAndWheelDrops_get
    if _newclass:bumpsAndWheelDrops = _swig_property(_kovan._1_bumpsAndWheelDrops_get, _kovan._1_bumpsAndWheelDrops_set)
    __swig_setmethods__["wall"] = _kovan._1_wall_set
    __swig_getmethods__["wall"] = _kovan._1_wall_get
    if _newclass:wall = _swig_property(_kovan._1_wall_get, _kovan._1_wall_set)
    __swig_setmethods__["cliffLeft"] = _kovan._1_cliffLeft_set
    __swig_getmethods__["cliffLeft"] = _kovan._1_cliffLeft_get
    if _newclass:cliffLeft = _swig_property(_kovan._1_cliffLeft_get, _kovan._1_cliffLeft_set)
    __swig_setmethods__["cliffFrontLeft"] = _kovan._1_cliffFrontLeft_set
    __swig_getmethods__["cliffFrontLeft"] = _kovan._1_cliffFrontLeft_get
    if _newclass:cliffFrontLeft = _swig_property(_kovan._1_cliffFrontLeft_get, _kovan._1_cliffFrontLeft_set)
    __swig_setmethods__["cliffFrontRight"] = _kovan._1_cliffFrontRight_set
    __swig_getmethods__["cliffFrontRight"] = _kovan._1_cliffFrontRight_get
    if _newclass:cliffFrontRight = _swig_property(_kovan._1_cliffFrontRight_get, _kovan._1_cliffFrontRight_set)
    __swig_setmethods__["cliffRight"] = _kovan._1_cliffRight_set
    __swig_getmethods__["cliffRight"] = _kovan._1_cliffRight_get
    if _newclass:cliffRight = _swig_property(_kovan._1_cliffRight_get, _kovan._1_cliffRight_set)
    __swig_setmethods__["virtualWall"] = _kovan._1_virtualWall_set
    __swig_getmethods__["virtualWall"] = _kovan._1_virtualWall_get
    if _newclass:virtualWall = _swig_property(_kovan._1_virtualWall_get, _kovan._1_virtualWall_set)
    __swig_setmethods__["cargoBayDigitalInputs"] = _kovan._1_cargoBayDigitalInputs_set
    __swig_getmethods__["cargoBayDigitalInputs"] = _kovan._1_cargoBayDigitalInputs_get
    if _newclass:cargoBayDigitalInputs = _swig_property(_kovan._1_cargoBayDigitalInputs_get, _kovan._1_cargoBayDigitalInputs_set)
    __swig_setmethods__["lowSideDriverAndWheelOvercurrents"] = _kovan._1_lowSideDriverAndWheelOvercurrents_set
    __swig_getmethods__["lowSideDriverAndWheelOvercurrents"] = _kovan._1_lowSideDriverAndWheelOvercurrents_get
    if _newclass:lowSideDriverAndWheelOvercurrents = _swig_property(_kovan._1_lowSideDriverAndWheelOvercurrents_get, _kovan._1_lowSideDriverAndWheelOvercurrents_set)
    def __init__(self): 
        this = _kovan.new__1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete__1
    __del__ = lambda self : None;
_1_swigregister = _kovan._1_swigregister
_1_swigregister(_1)

class _2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ir"] = _kovan._2_ir_set
    __swig_getmethods__["ir"] = _kovan._2_ir_get
    if _newclass:ir = _swig_property(_kovan._2_ir_get, _kovan._2_ir_set)
    __swig_setmethods__["buttons"] = _kovan._2_buttons_set
    __swig_getmethods__["buttons"] = _kovan._2_buttons_get
    if _newclass:buttons = _swig_property(_kovan._2_buttons_get, _kovan._2_buttons_set)
    __swig_setmethods__["distance"] = _kovan._2_distance_set
    __swig_getmethods__["distance"] = _kovan._2_distance_get
    if _newclass:distance = _swig_property(_kovan._2_distance_get, _kovan._2_distance_set)
    __swig_setmethods__["angle"] = _kovan._2_angle_set
    __swig_getmethods__["angle"] = _kovan._2_angle_get
    if _newclass:angle = _swig_property(_kovan._2_angle_get, _kovan._2_angle_set)
    def __init__(self): 
        this = _kovan.new__2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete__2
    __del__ = lambda self : None;
_2_swigregister = _kovan._2_swigregister
_2_swigregister(_2)

class _3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chargingState"] = _kovan._3_chargingState_set
    __swig_getmethods__["chargingState"] = _kovan._3_chargingState_get
    if _newclass:chargingState = _swig_property(_kovan._3_chargingState_get, _kovan._3_chargingState_set)
    __swig_setmethods__["voltage"] = _kovan._3_voltage_set
    __swig_getmethods__["voltage"] = _kovan._3_voltage_get
    if _newclass:voltage = _swig_property(_kovan._3_voltage_get, _kovan._3_voltage_set)
    __swig_setmethods__["current"] = _kovan._3_current_set
    __swig_getmethods__["current"] = _kovan._3_current_get
    if _newclass:current = _swig_property(_kovan._3_current_get, _kovan._3_current_set)
    __swig_setmethods__["batteryTemperature"] = _kovan._3_batteryTemperature_set
    __swig_getmethods__["batteryTemperature"] = _kovan._3_batteryTemperature_get
    if _newclass:batteryTemperature = _swig_property(_kovan._3_batteryTemperature_get, _kovan._3_batteryTemperature_set)
    __swig_setmethods__["batteryCharge"] = _kovan._3_batteryCharge_set
    __swig_getmethods__["batteryCharge"] = _kovan._3_batteryCharge_get
    if _newclass:batteryCharge = _swig_property(_kovan._3_batteryCharge_get, _kovan._3_batteryCharge_set)
    __swig_setmethods__["batteryCapacity"] = _kovan._3_batteryCapacity_set
    __swig_getmethods__["batteryCapacity"] = _kovan._3_batteryCapacity_get
    if _newclass:batteryCapacity = _swig_property(_kovan._3_batteryCapacity_get, _kovan._3_batteryCapacity_set)
    def __init__(self): 
        this = _kovan.new__3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete__3
    __del__ = lambda self : None;
_3_swigregister = _kovan._3_swigregister
_3_swigregister(_3)

class _4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wallSignal"] = _kovan._4_wallSignal_set
    __swig_getmethods__["wallSignal"] = _kovan._4_wallSignal_get
    if _newclass:wallSignal = _swig_property(_kovan._4_wallSignal_get, _kovan._4_wallSignal_set)
    __swig_setmethods__["cliffLeftSignal"] = _kovan._4_cliffLeftSignal_set
    __swig_getmethods__["cliffLeftSignal"] = _kovan._4_cliffLeftSignal_get
    if _newclass:cliffLeftSignal = _swig_property(_kovan._4_cliffLeftSignal_get, _kovan._4_cliffLeftSignal_set)
    __swig_setmethods__["cliffFrontLeftSignal"] = _kovan._4_cliffFrontLeftSignal_set
    __swig_getmethods__["cliffFrontLeftSignal"] = _kovan._4_cliffFrontLeftSignal_get
    if _newclass:cliffFrontLeftSignal = _swig_property(_kovan._4_cliffFrontLeftSignal_get, _kovan._4_cliffFrontLeftSignal_set)
    __swig_setmethods__["cliffFrontRightSignal"] = _kovan._4_cliffFrontRightSignal_set
    __swig_getmethods__["cliffFrontRightSignal"] = _kovan._4_cliffFrontRightSignal_get
    if _newclass:cliffFrontRightSignal = _swig_property(_kovan._4_cliffFrontRightSignal_get, _kovan._4_cliffFrontRightSignal_set)
    __swig_setmethods__["cliffRightSignal"] = _kovan._4_cliffRightSignal_set
    __swig_getmethods__["cliffRightSignal"] = _kovan._4_cliffRightSignal_get
    if _newclass:cliffRightSignal = _swig_property(_kovan._4_cliffRightSignal_get, _kovan._4_cliffRightSignal_set)
    __swig_setmethods__["userDigitalInputs"] = _kovan._4_userDigitalInputs_set
    __swig_getmethods__["userDigitalInputs"] = _kovan._4_userDigitalInputs_get
    if _newclass:userDigitalInputs = _swig_property(_kovan._4_userDigitalInputs_get, _kovan._4_userDigitalInputs_set)
    __swig_setmethods__["userAnalogInput"] = _kovan._4_userAnalogInput_set
    __swig_getmethods__["userAnalogInput"] = _kovan._4_userAnalogInput_get
    if _newclass:userAnalogInput = _swig_property(_kovan._4_userAnalogInput_get, _kovan._4_userAnalogInput_set)
    __swig_setmethods__["chargingSourcesAvailable"] = _kovan._4_chargingSourcesAvailable_set
    __swig_getmethods__["chargingSourcesAvailable"] = _kovan._4_chargingSourcesAvailable_get
    if _newclass:chargingSourcesAvailable = _swig_property(_kovan._4_chargingSourcesAvailable_get, _kovan._4_chargingSourcesAvailable_set)
    def __init__(self): 
        this = _kovan.new__4()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete__4
    __del__ = lambda self : None;
_4_swigregister = _kovan._4_swigregister
_4_swigregister(_4)

class _5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _5, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _kovan._5_mode_set
    __swig_getmethods__["mode"] = _kovan._5_mode_get
    if _newclass:mode = _swig_property(_kovan._5_mode_get, _kovan._5_mode_set)
    __swig_setmethods__["songNumber"] = _kovan._5_songNumber_set
    __swig_getmethods__["songNumber"] = _kovan._5_songNumber_get
    if _newclass:songNumber = _swig_property(_kovan._5_songNumber_get, _kovan._5_songNumber_set)
    __swig_setmethods__["songPlaying"] = _kovan._5_songPlaying_set
    __swig_getmethods__["songPlaying"] = _kovan._5_songPlaying_get
    if _newclass:songPlaying = _swig_property(_kovan._5_songPlaying_get, _kovan._5_songPlaying_set)
    __swig_setmethods__["numberOfStreamPackets"] = _kovan._5_numberOfStreamPackets_set
    __swig_getmethods__["numberOfStreamPackets"] = _kovan._5_numberOfStreamPackets_get
    if _newclass:numberOfStreamPackets = _swig_property(_kovan._5_numberOfStreamPackets_get, _kovan._5_numberOfStreamPackets_set)
    __swig_setmethods__["velocity"] = _kovan._5_velocity_set
    __swig_getmethods__["velocity"] = _kovan._5_velocity_get
    if _newclass:velocity = _swig_property(_kovan._5_velocity_get, _kovan._5_velocity_set)
    __swig_setmethods__["radius"] = _kovan._5_radius_set
    __swig_getmethods__["radius"] = _kovan._5_radius_get
    if _newclass:radius = _swig_property(_kovan._5_radius_get, _kovan._5_radius_set)
    __swig_setmethods__["rightVelocity"] = _kovan._5_rightVelocity_set
    __swig_getmethods__["rightVelocity"] = _kovan._5_rightVelocity_get
    if _newclass:rightVelocity = _swig_property(_kovan._5_rightVelocity_get, _kovan._5_rightVelocity_set)
    __swig_setmethods__["leftVelocity"] = _kovan._5_leftVelocity_set
    __swig_getmethods__["leftVelocity"] = _kovan._5_leftVelocity_get
    if _newclass:leftVelocity = _swig_property(_kovan._5_leftVelocity_get, _kovan._5_leftVelocity_set)
    def __init__(self): 
        this = _kovan.new__5()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete__5
    __del__ = lambda self : None;
_5_swigregister = _kovan._5_swigregister
_5_swigregister(_5)

class Create(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Create, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Create, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OffMode = _kovan.Create_OffMode
    PassiveMode = _kovan.Create_PassiveMode
    SafeMode = _kovan.Create_SafeMode
    FullMode = _kovan.Create_FullMode
    __swig_destroy__ = _kovan.delete_Create
    __del__ = lambda self : None;
    Baud57600 = _kovan.Create_Baud57600
    Baud115200 = _kovan.Create_Baud115200
    def connect(self, *args): return _kovan.Create_connect(self, *args)
    def disconnect(self): return _kovan.Create_disconnect(self)
    def isConnected(self): return _kovan.Create_isConnected(self)
    def setPassiveMode(self): return _kovan.Create_setPassiveMode(self)
    def setSafeMode(self): return _kovan.Create_setSafeMode(self)
    def setFullMode(self): return _kovan.Create_setFullMode(self)
    def setMode(self, *args): return _kovan.Create_setMode(self, *args)
    def mode(self): return _kovan.Create_mode(self)
    def send(self, *args): return _kovan.Create_send(self, *args)
    def flush(self): return _kovan.Create_flush(self)
    def read(self, *args): return _kovan.Create_read(self, *args)
    def blockingRead(self, *args): return _kovan.Create_blockingRead(self, *args)
    def setLeds(self, *args): return _kovan.Create_setLeds(self, *args)
    def drive(self, *args): return _kovan.Create_drive(self, *args)
    def driveDirect(self, *args): return _kovan.Create_driveDirect(self, *args)
    def driveStraight(self, *args): return _kovan.Create_driveStraight(self, *args)
    def stop(self): return _kovan.Create_stop(self)
    def turn(self, *args): return _kovan.Create_turn(self, *args)
    def move(self, *args): return _kovan.Create_move(self, *args)
    def spin(self, *args): return _kovan.Create_spin(self, *args)
    def angularVelocity(self): return _kovan.Create_angularVelocity(self)
    def spinClockwise(self, *args): return _kovan.Create_spinClockwise(self, *args)
    def spinCounterClockwise(self, *args): return _kovan.Create_spinCounterClockwise(self, *args)
    def setBaudRate(self, *args): return _kovan.Create_setBaudRate(self, *args)
    def setDistance(self, *args): return _kovan.Create_setDistance(self, *args)
    def setAngle(self, *args): return _kovan.Create_setAngle(self, *args)
    def playButton(self): return _kovan.Create_playButton(self)
    def advanceButton(self): return _kovan.Create_advanceButton(self)
    def wall(self): return _kovan.Create_wall(self)
    def cliffLeft(self): return _kovan.Create_cliffLeft(self)
    def cliffFrontLeft(self): return _kovan.Create_cliffFrontLeft(self)
    def cliffFrontRight(self): return _kovan.Create_cliffFrontRight(self)
    def cliffRight(self): return _kovan.Create_cliffRight(self)
    def virtualWall(self): return _kovan.Create_virtualWall(self)
    def wallSignal(self): return _kovan.Create_wallSignal(self)
    def cliffLeftSignal(self): return _kovan.Create_cliffLeftSignal(self)
    def cliffFrontLeftSignal(self): return _kovan.Create_cliffFrontLeftSignal(self)
    def cliffFrontRightSignal(self): return _kovan.Create_cliffFrontRightSignal(self)
    def cliffRightSignal(self): return _kovan.Create_cliffRightSignal(self)
    def cargoBayAnalogSignal(self): return _kovan.Create_cargoBayAnalogSignal(self)
    def cargoBayDigitalInputs(self): return _kovan.Create_cargoBayDigitalInputs(self)
    def ir(self): return _kovan.Create_ir(self)
    def chargingState(self): return _kovan.Create_chargingState(self)
    def batteryTemperature(self): return _kovan.Create_batteryTemperature(self)
    def batteryCharge(self): return _kovan.Create_batteryCharge(self)
    def batteryCapacity(self): return _kovan.Create_batteryCapacity(self)
    def angle(self): return _kovan.Create_angle(self)
    def distance(self): return _kovan.Create_distance(self)
    def bumpLeft(self): return _kovan.Create_bumpLeft(self)
    def bumpRight(self): return _kovan.Create_bumpRight(self)
    def wheelDropLeft(self): return _kovan.Create_wheelDropLeft(self)
    def wheelDropRight(self): return _kovan.Create_wheelDropRight(self)
    def wheelDropCaster(self): return _kovan.Create_wheelDropCaster(self)
    def setRefreshRate(self, *args): return _kovan.Create_setRefreshRate(self, *args)
    def refreshRate(self): return _kovan.Create_refreshRate(self)
    __swig_getmethods__["instance"] = lambda x: _kovan.Create_instance
    if _newclass:instance = staticmethod(_kovan.Create_instance)
    def state(self): return _kovan.Create_state(self)
    def sensorPacket1(self): return _kovan.Create_sensorPacket1(self)
    def sensorPacket2(self): return _kovan.Create_sensorPacket2(self)
    def sensorPacket3(self): return _kovan.Create_sensorPacket3(self)
    def sensorPacket4(self): return _kovan.Create_sensorPacket4(self)
    def sensorPacket5(self): return _kovan.Create_sensorPacket5(self)
    def beginAtomicOperation(self): return _kovan.Create_beginAtomicOperation(self)
    def endAtomicOperation(self): return _kovan.Create_endAtomicOperation(self)
    def setDefaultBaudRate(self, *args): return _kovan.Create_setDefaultBaudRate(self, *args)
    def defaultBaudRate(self): return _kovan.Create_defaultBaudRate(self)
    def write(self, *args): return _kovan.Create_write(self, *args)
Create_swigregister = _kovan.Create_swigregister
Create_swigregister(Create)

def Create_instance():
  return _kovan.Create_instance()
Create_instance = _kovan.Create_instance

class Rgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rgb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _kovan.Rgb_r_set
    __swig_getmethods__["r"] = _kovan.Rgb_r_get
    if _newclass:r = _swig_property(_kovan.Rgb_r_get, _kovan.Rgb_r_set)
    __swig_setmethods__["g"] = _kovan.Rgb_g_set
    __swig_getmethods__["g"] = _kovan.Rgb_g_get
    if _newclass:g = _swig_property(_kovan.Rgb_g_get, _kovan.Rgb_g_set)
    __swig_setmethods__["b"] = _kovan.Rgb_b_set
    __swig_getmethods__["b"] = _kovan.Rgb_b_get
    if _newclass:b = _swig_property(_kovan.Rgb_b_get, _kovan.Rgb_b_set)
    def __init__(self): 
        this = _kovan.new_Rgb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Rgb
    __del__ = lambda self : None;
Rgb_swigregister = _kovan.Rgb_swigregister
Rgb_swigregister(Rgb)

class Hsv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hsv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hsv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _kovan.Hsv_h_set
    __swig_getmethods__["h"] = _kovan.Hsv_h_get
    if _newclass:h = _swig_property(_kovan.Hsv_h_get, _kovan.Hsv_h_set)
    __swig_setmethods__["s"] = _kovan.Hsv_s_set
    __swig_getmethods__["s"] = _kovan.Hsv_s_get
    if _newclass:s = _swig_property(_kovan.Hsv_s_get, _kovan.Hsv_s_set)
    __swig_setmethods__["v"] = _kovan.Hsv_v_set
    __swig_getmethods__["v"] = _kovan.Hsv_v_get
    if _newclass:v = _swig_property(_kovan.Hsv_v_get, _kovan.Hsv_v_set)
    def __init__(self): 
        this = _kovan.new_Hsv()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Hsv
    __del__ = lambda self : None;
Hsv_swigregister = _kovan.Hsv_swigregister
Hsv_swigregister(Hsv)

class Battery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Battery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Battery, name)
    __repr__ = _swig_repr
    __swig_getmethods__["isCharging"] = lambda x: _kovan.Battery_isCharging
    if _newclass:isCharging = staticmethod(_kovan.Battery_isCharging)
    __swig_getmethods__["powerLevel"] = lambda x: _kovan.Battery_powerLevel
    if _newclass:powerLevel = staticmethod(_kovan.Battery_powerLevel)
    def __init__(self): 
        this = _kovan.new_Battery()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Battery
    __del__ = lambda self : None;
Battery_swigregister = _kovan.Battery_swigregister
Battery_swigregister(Battery)

def Battery_isCharging():
  return _kovan.Battery_isCharging()
Battery_isCharging = _kovan.Battery_isCharging

def Battery_powerLevel():
  return _kovan.Battery_powerLevel()
Battery_powerLevel = _kovan.Battery_powerLevel

class Analog(UnsignedShortSensor):
    __swig_setmethods__ = {}
    for _s in [UnsignedShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analog, name, value)
    __swig_getmethods__ = {}
    for _s in [UnsignedShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Analog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Analog(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self): return _kovan.Analog_value(self)
    def setPullup(self, *args): return _kovan.Analog_setPullup(self, *args)
    def pullup(self): return _kovan.Analog_pullup(self)
    def port(self): return _kovan.Analog_port(self)
    __swig_destroy__ = _kovan.delete_Analog
    __del__ = lambda self : None;
Analog_swigregister = _kovan.Analog_swigregister
Analog_swigregister(Analog)

class Analog8(Analog):
    __swig_setmethods__ = {}
    for _s in [Analog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analog8, name, value)
    __swig_getmethods__ = {}
    for _s in [Analog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Analog8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Analog8(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self): return _kovan.Analog8_value(self)
    __swig_destroy__ = _kovan.delete_Analog8
    __del__ = lambda self : None;
Analog8_swigregister = _kovan.Analog8_swigregister
Analog8_swigregister(Analog8)

class Acceleration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acceleration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Acceleration, name)
    __repr__ = _swig_repr
    __swig_getmethods__["x"] = lambda x: _kovan.Acceleration_x
    if _newclass:x = staticmethod(_kovan.Acceleration_x)
    __swig_getmethods__["y"] = lambda x: _kovan.Acceleration_y
    if _newclass:y = staticmethod(_kovan.Acceleration_y)
    __swig_getmethods__["z"] = lambda x: _kovan.Acceleration_z
    if _newclass:z = staticmethod(_kovan.Acceleration_z)
    __swig_getmethods__["calibrate"] = lambda x: _kovan.Acceleration_calibrate
    if _newclass:calibrate = staticmethod(_kovan.Acceleration_calibrate)
    def __init__(self): 
        this = _kovan.new_Acceleration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Acceleration
    __del__ = lambda self : None;
Acceleration_swigregister = _kovan.Acceleration_swigregister
Acceleration_swigregister(Acceleration)

def Acceleration_x():
  return _kovan.Acceleration_x()
Acceleration_x = _kovan.Acceleration_x

def Acceleration_y():
  return _kovan.Acceleration_y()
Acceleration_y = _kovan.Acceleration_y

def Acceleration_z():
  return _kovan.Acceleration_z()
Acceleration_z = _kovan.Acceleration_z

def Acceleration_calibrate():
  return _kovan.Acceleration_calibrate()
Acceleration_calibrate = _kovan.Acceleration_calibrate

class AccelX(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelX, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccelX, name)
    __repr__ = _swig_repr
    def value(self): return _kovan.AccelX_value(self)
    def __init__(self): 
        this = _kovan.new_AccelX()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_AccelX
    __del__ = lambda self : None;
AccelX_swigregister = _kovan.AccelX_swigregister
AccelX_swigregister(AccelX)

class AccelY(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelY, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccelY, name)
    __repr__ = _swig_repr
    def value(self): return _kovan.AccelY_value(self)
    def __init__(self): 
        this = _kovan.new_AccelY()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_AccelY
    __del__ = lambda self : None;
AccelY_swigregister = _kovan.AccelY_swigregister
AccelY_swigregister(AccelY)

class AccelZ(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelZ, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccelZ, name)
    __repr__ = _swig_repr
    def value(self): return _kovan.AccelZ_value(self)
    def __init__(self): 
        this = _kovan.new_AccelZ()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_AccelZ
    __del__ = lambda self : None;
AccelZ_swigregister = _kovan.AccelZ_swigregister
AccelZ_swigregister(AccelZ)

CAMERA_GROUP = _kovan.CAMERA_GROUP
CAMERA_NUM_CHANNELS_KEY = _kovan.CAMERA_NUM_CHANNELS_KEY
CAMERA_CHANNEL_GROUP_PREFIX = _kovan.CAMERA_CHANNEL_GROUP_PREFIX
CAMERA_CHANNEL_TYPE_KEY = _kovan.CAMERA_CHANNEL_TYPE_KEY
CAMERA_CHANNEL_TYPE_HSV_KEY = _kovan.CAMERA_CHANNEL_TYPE_HSV_KEY
CAMERA_CHANNEL_TYPE_QR_KEY = _kovan.CAMERA_CHANNEL_TYPE_QR_KEY
class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Object(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Object
    __del__ = lambda self : None;
    def confidence(self): return _kovan.Object_confidence(self)
    def data(self): return _kovan.Object_data(self)
    def dataLength(self): return _kovan.Object_dataLength(self)
Object_swigregister = _kovan.Object_swigregister
Object_swigregister(Object)

class ChannelImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_ChannelImpl
    __del__ = lambda self : None;
    def setImage(self, *args): return _kovan.ChannelImpl_setImage(self, *args)
    def objects(self, *args): return _kovan.ChannelImpl_objects(self, *args)
ChannelImpl_swigregister = _kovan.ChannelImpl_swigregister
ChannelImpl_swigregister(ChannelImpl)

class ChannelImplManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelImplManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelImplManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_ChannelImplManager
    __del__ = lambda self : None;
    def setImage(self, *args): return _kovan.ChannelImplManager_setImage(self, *args)
    def channelImpl(self, *args): return _kovan.ChannelImplManager_channelImpl(self, *args)
ChannelImplManager_swigregister = _kovan.ChannelImplManager_swigregister
ChannelImplManager_swigregister(ChannelImplManager)

class DefaultChannelImplManager(ChannelImplManager):
    __swig_setmethods__ = {}
    for _s in [ChannelImplManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultChannelImplManager, name, value)
    __swig_getmethods__ = {}
    for _s in [ChannelImplManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultChannelImplManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _kovan.new_DefaultChannelImplManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_DefaultChannelImplManager
    __del__ = lambda self : None;
    def setImage(self, *args): return _kovan.DefaultChannelImplManager_setImage(self, *args)
    def channelImpl(self, *args): return _kovan.DefaultChannelImplManager_channelImpl(self, *args)
DefaultChannelImplManager_swigregister = _kovan.DefaultChannelImplManager_swigregister
DefaultChannelImplManager_swigregister(DefaultChannelImplManager)

class Channel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Channel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Channel
    __del__ = lambda self : None;
    def invalidate(self): return _kovan.Channel_invalidate(self)
    def device(self): return _kovan.Channel_device(self)
    def setConfig(self, *args): return _kovan.Channel_setConfig(self, *args)
Channel_swigregister = _kovan.Channel_swigregister
Channel_swigregister(Channel)

class ConfigPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigPath, name)
    __repr__ = _swig_repr
    __swig_getmethods__["extension"] = lambda x: _kovan.ConfigPath_extension
    if _newclass:extension = staticmethod(_kovan.ConfigPath_extension)
    __swig_getmethods__["setBasePath"] = lambda x: _kovan.ConfigPath_setBasePath
    if _newclass:setBasePath = staticmethod(_kovan.ConfigPath_setBasePath)
    __swig_getmethods__["path"] = lambda x: _kovan.ConfigPath_path
    if _newclass:path = staticmethod(_kovan.ConfigPath_path)
    __swig_getmethods__["defaultPath"] = lambda x: _kovan.ConfigPath_defaultPath
    if _newclass:defaultPath = staticmethod(_kovan.ConfigPath_defaultPath)
    __swig_getmethods__["defaultConfigPath"] = lambda x: _kovan.ConfigPath_defaultConfigPath
    if _newclass:defaultConfigPath = staticmethod(_kovan.ConfigPath_defaultConfigPath)
    __swig_getmethods__["setDefaultConfigPath"] = lambda x: _kovan.ConfigPath_setDefaultConfigPath
    if _newclass:setDefaultConfigPath = staticmethod(_kovan.ConfigPath_setDefaultConfigPath)
    def __init__(self): 
        this = _kovan.new_ConfigPath()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_ConfigPath
    __del__ = lambda self : None;
ConfigPath_swigregister = _kovan.ConfigPath_swigregister
ConfigPath_swigregister(ConfigPath)

def ConfigPath_extension():
  return _kovan.ConfigPath_extension()
ConfigPath_extension = _kovan.ConfigPath_extension

def ConfigPath_setBasePath(*args):
  return _kovan.ConfigPath_setBasePath(*args)
ConfigPath_setBasePath = _kovan.ConfigPath_setBasePath

def ConfigPath_path(*args):
  return _kovan.ConfigPath_path(*args)
ConfigPath_path = _kovan.ConfigPath_path

def ConfigPath_defaultPath():
  return _kovan.ConfigPath_defaultPath()
ConfigPath_defaultPath = _kovan.ConfigPath_defaultPath

def ConfigPath_defaultConfigPath():
  return _kovan.ConfigPath_defaultConfigPath()
ConfigPath_defaultConfigPath = _kovan.ConfigPath_defaultConfigPath

def ConfigPath_setDefaultConfigPath(*args):
  return _kovan.ConfigPath_setDefaultConfigPath(*args)
ConfigPath_setDefaultConfigPath = _kovan.ConfigPath_setDefaultConfigPath

class InputProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputProvider, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_InputProvider
    __del__ = lambda self : None;
    def _open(self, *args): return _kovan.InputProvider__open(self, *args)
    def isOpen(self): return _kovan.InputProvider_isOpen(self)
    def setWidth(self, *args): return _kovan.InputProvider_setWidth(self, *args)
    def setHeight(self, *args): return _kovan.InputProvider_setHeight(self, *args)
    def next(self, *args): return _kovan.InputProvider_next(self, *args)
    def close(self): return _kovan.InputProvider_close(self)
InputProvider_swigregister = _kovan.InputProvider_swigregister
InputProvider_swigregister(InputProvider)

class UsbInputProvider(InputProvider):
    __swig_setmethods__ = {}
    for _s in [InputProvider]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbInputProvider, name, value)
    __swig_getmethods__ = {}
    for _s in [InputProvider]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UsbInputProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _kovan.new_UsbInputProvider()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_UsbInputProvider
    __del__ = lambda self : None;
    def _open(self, *args): return _kovan.UsbInputProvider__open(self, *args)
    def isOpen(self): return _kovan.UsbInputProvider_isOpen(self)
    def setWidth(self, *args): return _kovan.UsbInputProvider_setWidth(self, *args)
    def setHeight(self, *args): return _kovan.UsbInputProvider_setHeight(self, *args)
    def next(self, *args): return _kovan.UsbInputProvider_next(self, *args)
    def close(self): return _kovan.UsbInputProvider_close(self)
UsbInputProvider_swigregister = _kovan.UsbInputProvider_swigregister
UsbInputProvider_swigregister(UsbInputProvider)

class CameraDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraDevice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_CameraDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_CameraDevice
    __del__ = lambda self : None;
    def _open(self, number = 0): return _kovan.CameraDevice__open(self, number)
    def isOpen(self): return _kovan.CameraDevice_isOpen(self)
    def close(self): return _kovan.CameraDevice_close(self)
    def update(self): return _kovan.CameraDevice_update(self)
    def setWidth(self, *args): return _kovan.CameraDevice_setWidth(self, *args)
    def setHeight(self, *args): return _kovan.CameraDevice_setHeight(self, *args)
    def width(self): return _kovan.CameraDevice_width(self)
    def height(self): return _kovan.CameraDevice_height(self)
    def inputProvider(self): return _kovan.CameraDevice_inputProvider(self)
    def rawImage(self): return _kovan.CameraDevice_rawImage(self)
    def setConfig(self, *args): return _kovan.CameraDevice_setConfig(self, *args)
    def config(self): return _kovan.CameraDevice_config(self)
    def setChannelImplManager(self, *args): return _kovan.CameraDevice_setChannelImplManager(self, *args)
    def channelImplManager(self): return _kovan.CameraDevice_channelImplManager(self)
    def bgr(self): return _kovan.CameraDevice_bgr(self)
CameraDevice_swigregister = _kovan.CameraDevice_swigregister
CameraDevice_swigregister(CameraDevice)


def cDevice():
  return _kovan.cDevice()
cDevice = _kovan.cDevice
class AbstractButton(BoolSensor):
    __swig_setmethods__ = {}
    for _s in [BoolSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractButton, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractButton, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_AbstractButton
    __del__ = lambda self : None;
    def setPressed(self, *args): return _kovan.AbstractButton_setPressed(self, *args)
    def isPressed(self): return _kovan.AbstractButton_isPressed(self)
    def isNotPressed(self): return _kovan.AbstractButton_isNotPressed(self)
    def isClicked(self): return _kovan.AbstractButton_isClicked(self)
    def waitUntilReleased(self): return _kovan.AbstractButton_waitUntilReleased(self)
    def waitUntilPressed(self): return _kovan.AbstractButton_waitUntilPressed(self)
    def waitUntilClicked(self): return _kovan.AbstractButton_waitUntilClicked(self)
AbstractButton_swigregister = _kovan.AbstractButton_swigregister
AbstractButton_swigregister(AbstractButton)

class AbstractTextButton(AbstractButton):
    __swig_setmethods__ = {}
    for _s in [AbstractButton]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractTextButton, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractButton]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractTextButton, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_AbstractTextButton
    __del__ = lambda self : None;
    def setText(self, *args): return _kovan.AbstractTextButton_setText(self, *args)
    def text(self): return _kovan.AbstractTextButton_text(self)
    def isTextDirty(self): return _kovan.AbstractTextButton_isTextDirty(self)
    def resetText(self): return _kovan.AbstractTextButton_resetText(self)
AbstractTextButton_swigregister = _kovan.AbstractTextButton_swigregister
AbstractTextButton_swigregister(AbstractTextButton)

class IdButton(AbstractTextButton):
    __swig_setmethods__ = {}
    for _s in [AbstractTextButton]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdButton, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractTextButton]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdButton, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_IdButton(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_IdButton
    __del__ = lambda self : None;
    def setText(self, *args): return _kovan.IdButton_setText(self, *args)
    def text(self): return _kovan.IdButton_text(self)
    def isTextDirty(self): return _kovan.IdButton_isTextDirty(self)
    def setPressed(self, *args): return _kovan.IdButton_setPressed(self, *args)
    def value(self): return _kovan.IdButton_value(self)
    def resetText(self): return _kovan.IdButton_resetText(self)
IdButton_swigregister = _kovan.IdButton_swigregister
IdButton_swigregister(IdButton)

class ExtraButtons(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtraButtons, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtraButtons, name)
    __repr__ = _swig_repr
    __swig_getmethods__["show"] = lambda x: _kovan.ExtraButtons_show
    if _newclass:show = staticmethod(_kovan.ExtraButtons_show)
    __swig_getmethods__["hide"] = lambda x: _kovan.ExtraButtons_hide
    if _newclass:hide = staticmethod(_kovan.ExtraButtons_hide)
    __swig_getmethods__["setShown"] = lambda x: _kovan.ExtraButtons_setShown
    if _newclass:setShown = staticmethod(_kovan.ExtraButtons_setShown)
    __swig_getmethods__["isShown"] = lambda x: _kovan.ExtraButtons_isShown
    if _newclass:isShown = staticmethod(_kovan.ExtraButtons_isShown)
    def __init__(self): 
        this = _kovan.new_ExtraButtons()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_ExtraButtons
    __del__ = lambda self : None;
ExtraButtons_swigregister = _kovan.ExtraButtons_swigregister
ExtraButtons_swigregister(ExtraButtons)

def ExtraButtons_show():
  return _kovan.ExtraButtons_show()
ExtraButtons_show = _kovan.ExtraButtons_show

def ExtraButtons_hide():
  return _kovan.ExtraButtons_hide()
ExtraButtons_hide = _kovan.ExtraButtons_hide

def ExtraButtons_setShown(*args):
  return _kovan.ExtraButtons_setShown(*args)
ExtraButtons_setShown = _kovan.ExtraButtons_setShown

def ExtraButtons_isShown():
  return _kovan.ExtraButtons_isShown()
ExtraButtons_isShown = _kovan.ExtraButtons_isShown

class ARDrone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARDrone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARDrone, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Disconnected = _kovan.ARDrone_Disconnected
    Landed = _kovan.ARDrone_Landed
    Flying = _kovan.ARDrone_Flying
    Off = _kovan.ARDrone_Off
    Front = _kovan.ARDrone_Front
    Bottom = _kovan.ARDrone_Bottom
    Unknown = _kovan.ARDrone_Unknown
    V1 = _kovan.ARDrone_V1
    V2 = _kovan.ARDrone_V2
    __swig_destroy__ = _kovan.delete_ARDrone
    __del__ = lambda self : None;
    def connect(self, ip = "192.168.1.1", timeout = 3.0): return _kovan.ARDrone_connect(self, ip, timeout)
    def disconnect(self): return _kovan.ARDrone_disconnect(self)
    def version(self): return _kovan.ARDrone_version(self)
    def navigationData(self): return _kovan.ARDrone_navigationData(self)
    def clearPosition(self): return _kovan.ARDrone_clearPosition(self)
    def setSsid(self, *args): return _kovan.ARDrone_setSsid(self, *args)
    def setActiveCamera(self, *args): return _kovan.ARDrone_setActiveCamera(self, *args)
    def activeCamera(self): return _kovan.ARDrone_activeCamera(self)
    def flatTrim(self): return _kovan.ARDrone_flatTrim(self)
    def takeoff(self): return _kovan.ARDrone_takeoff(self)
    def land(self): return _kovan.ARDrone_land(self)
    def setEmergencyStopEnabled(self, *args): return _kovan.ARDrone_setEmergencyStopEnabled(self, *args)
    def isEmergencyStopEnabled(self): return _kovan.ARDrone_isEmergencyStopEnabled(self)
    def setOwnerAddress(self, *args): return _kovan.ARDrone_setOwnerAddress(self, *args)
    def pair(self): return _kovan.ARDrone_pair(self)
    def hover(self): return _kovan.ARDrone_hover(self)
    def move(self, *args): return _kovan.ARDrone_move(self, *args)
    def configuration(self): return _kovan.ARDrone_configuration(self)
    def rawImage(self, *args): return _kovan.ARDrone_rawImage(self, *args)
    def state(self): return _kovan.ARDrone_state(self)
    __swig_getmethods__["instance"] = lambda x: _kovan.ARDrone_instance
    if _newclass:instance = staticmethod(_kovan.ARDrone_instance)
ARDrone_swigregister = _kovan.ARDrone_swigregister
ARDrone_swigregister(ARDrone)
cvar = _kovan.cvar
all = cvar.all

def ARDrone_instance():
  return _kovan.ARDrone_instance()
ARDrone_instance = _kovan.ARDrone_instance

class ARDroneInputProvider(InputProvider):
    __swig_setmethods__ = {}
    for _s in [InputProvider]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARDroneInputProvider, name, value)
    __swig_getmethods__ = {}
    for _s in [InputProvider]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ARDroneInputProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _kovan.new_ARDroneInputProvider()
        try: self.this.append(this)
        except: self.this = this
    def _open(self, *args): return _kovan.ARDroneInputProvider__open(self, *args)
    def isOpen(self): return _kovan.ARDroneInputProvider_isOpen(self)
    def setWidth(self, *args): return _kovan.ARDroneInputProvider_setWidth(self, *args)
    def setHeight(self, *args): return _kovan.ARDroneInputProvider_setHeight(self, *args)
    def next(self, *args): return _kovan.ARDroneInputProvider_next(self, *args)
    def close(self): return _kovan.ARDroneInputProvider_close(self)
    __swig_destroy__ = _kovan.delete_ARDroneInputProvider
    __del__ = lambda self : None;
ARDroneInputProvider_swigregister = _kovan.ARDroneInputProvider_swigregister
ARDroneInputProvider_swigregister(ARDroneInputProvider)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["load"] = lambda x: _kovan.Config_load
    if _newclass:load = staticmethod(_kovan.Config_load)
    def save(self, *args): return _kovan.Config_save(self, *args)
    def beginGroup(self, *args): return _kovan.Config_beginGroup(self, *args)
    def endGroup(self): return _kovan.Config_endGroup(self)
    def clearGroup(self): return _kovan.Config_clearGroup(self)
    def clear(self): return _kovan.Config_clear(self)
    def containsKey(self, *args): return _kovan.Config_containsKey(self, *args)
    def boolValue(self, *args): return _kovan.Config_boolValue(self, *args)
    def intValue(self, *args): return _kovan.Config_intValue(self, *args)
    def doubleValue(self, *args): return _kovan.Config_doubleValue(self, *args)
    def stringValue(self, *args): return _kovan.Config_stringValue(self, *args)
    def setValue(self, *args): return _kovan.Config_setValue(self, *args)
    def values(self): return _kovan.Config_values(self)
    def addValues(self, *args): return _kovan.Config_addValues(self, *args)
    __swig_destroy__ = _kovan.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _kovan.Config_swigregister
Config_swigregister(Config)

def Config_load(*args):
  return _kovan.Config_load(*args)
Config_load = _kovan.Config_load

class Category(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Category, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Category, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def append(self, *args): return _kovan.Category_append(self, *args)
    def remove(self, *args): return _kovan.Category_remove(self, *args)
    def entries(self): return _kovan.Category_entries(self)
    def name(self): return _kovan.Category_name(self)
    __swig_destroy__ = _kovan.delete_Category
    __del__ = lambda self : None;
Category_swigregister = _kovan.Category_swigregister
Category_swigregister(Category)

class DataLogWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataLogWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataLogWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_DataLogWriter
    __del__ = lambda self : None;
    def write(self, *args): return _kovan.DataLogWriter_write(self, *args)
DataLogWriter_swigregister = _kovan.DataLogWriter_swigregister
DataLogWriter_swigregister(DataLogWriter)

class CsvWriter(DataLogWriter):
    __swig_setmethods__ = {}
    for _s in [DataLogWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CsvWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [DataLogWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CsvWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_CsvWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def write(self, *args): return _kovan.CsvWriter_write(self, *args)
    __swig_destroy__ = _kovan.delete_CsvWriter
    __del__ = lambda self : None;
CsvWriter_swigregister = _kovan.CsvWriter_swigregister
CsvWriter_swigregister(CsvWriter)

class PlainWriter(DataLogWriter):
    __swig_setmethods__ = {}
    for _s in [DataLogWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlainWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [DataLogWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlainWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_PlainWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def write(self, *args): return _kovan.PlainWriter_write(self, *args)
    __swig_destroy__ = _kovan.delete_PlainWriter
    __del__ = lambda self : None;
PlainWriter_swigregister = _kovan.PlainWriter_swigregister
PlainWriter_swigregister(PlainWriter)

class DataLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataLog, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_DataLog
    __del__ = lambda self : None;
    def category(self, *args): return _kovan.DataLog_category(self, *args)
    def removeCategory(self, *args): return _kovan.DataLog_removeCategory(self, *args)
    def categories(self): return _kovan.DataLog_categories(self)
    def write(self, *args): return _kovan.DataLog_write(self, *args)
    def clear(self): return _kovan.DataLog_clear(self)
    def __init__(self): 
        this = _kovan.new_DataLog()
        try: self.this.append(this)
        except: self.this = this
DataLog_swigregister = _kovan.DataLog_swigregister
DataLog_swigregister(DataLog)

class ColinearSegmenter(IntSegmenter):
    __swig_setmethods__ = {}
    for _s in [IntSegmenter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColinearSegmenter, name, value)
    __swig_getmethods__ = {}
    for _s in [IntSegmenter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColinearSegmenter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_ColinearSegmenter(*args)
        try: self.this.append(this)
        except: self.this = this
    def findSegments(self, *args): return _kovan.ColinearSegmenter_findSegments(self, *args)
    __swig_destroy__ = _kovan.delete_ColinearSegmenter
    __del__ = lambda self : None;
ColinearSegmenter_swigregister = _kovan.ColinearSegmenter_swigregister
ColinearSegmenter_swigregister(ColinearSegmenter)

class Digital(BoolSensor):
    __swig_setmethods__ = {}
    for _s in [BoolSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Digital, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Digital, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kovan.new_Digital(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args): return _kovan.Digital_setValue(self, *args)
    def value(self): return _kovan.Digital_value(self)
    def setOutput(self, *args): return _kovan.Digital_setOutput(self, *args)
    def isOutput(self): return _kovan.Digital_isOutput(self)
    def setPullup(self, *args): return _kovan.Digital_setPullup(self, *args)
    def pullup(self): return _kovan.Digital_pullup(self)
    __swig_destroy__ = _kovan.delete_Digital
    __del__ = lambda self : None;
Digital_swigregister = _kovan.Digital_swigregister
Digital_swigregister(Digital)

RGB = _kovan.RGB
BGR = _kovan.BGR
KeyEnter = _kovan.KeyEnter
KeyBackSpace = _kovan.KeyBackSpace
KeyTab = _kovan.KeyTab
KeyCancel = _kovan.KeyCancel
KeyClear = _kovan.KeyClear
KeyShift = _kovan.KeyShift
KeyControl = _kovan.KeyControl
KeyAlt = _kovan.KeyAlt
KeyPause = _kovan.KeyPause
KeyCapsLock = _kovan.KeyCapsLock
KeyEscape = _kovan.KeyEscape
KeySpace = _kovan.KeySpace
KeyPageUp = _kovan.KeyPageUp
KeyPageDown = _kovan.KeyPageDown
KeyEnd = _kovan.KeyEnd
KeyHome = _kovan.KeyHome
KeyLeft = _kovan.KeyLeft
KeyUp = _kovan.KeyUp
KeyRight = _kovan.KeyRight
KeyDown = _kovan.KeyDown
KeyComma = _kovan.KeyComma
KeyPeriod = _kovan.KeyPeriod
KeySlash = _kovan.KeySlash
KeyZero = _kovan.KeyZero
KeyOne = _kovan.KeyOne
KeyTwo = _kovan.KeyTwo
KeyThree = _kovan.KeyThree
KeyFour = _kovan.KeyFour
KeyFive = _kovan.KeyFive
KeySix = _kovan.KeySix
KeySeven = _kovan.KeySeven
KeyEight = _kovan.KeyEight
KeyNine = _kovan.KeyNine
KeySemiColon = _kovan.KeySemiColon
KeyEquals = _kovan.KeyEquals
KeyA = _kovan.KeyA
KeyB = _kovan.KeyB
KeyC = _kovan.KeyC
KeyD = _kovan.KeyD
KeyE = _kovan.KeyE
KeyF = _kovan.KeyF
KeyG = _kovan.KeyG
KeyH = _kovan.KeyH
KeyI = _kovan.KeyI
KeyJ = _kovan.KeyJ
KeyK = _kovan.KeyK
KeyL = _kovan.KeyL
KeyM = _kovan.KeyM
KeyN = _kovan.KeyN
KeyO = _kovan.KeyO
KeyP = _kovan.KeyP
KeyQ = _kovan.KeyQ
KeyR = _kovan.KeyR
KeyS = _kovan.KeyS
KeyT = _kovan.KeyT
KeyU = _kovan.KeyU
KeyV = _kovan.KeyV
KeyW = _kovan.KeyW
KeyX = _kovan.KeyX
KeyY = _kovan.KeyY
KeyZ = _kovan.KeyZ
KeyOpenBracket = _kovan.KeyOpenBracket
KeyBackSlash = _kovan.KeyBackSlash
KeyCloseBracket = _kovan.KeyCloseBracket
KeyNumPad0 = _kovan.KeyNumPad0
KeyNumPad1 = _kovan.KeyNumPad1
KeyNumPad2 = _kovan.KeyNumPad2
KeyNumPad3 = _kovan.KeyNumPad3
KeyNumPad4 = _kovan.KeyNumPad4
KeyNumPad5 = _kovan.KeyNumPad5
KeyNumPad6 = _kovan.KeyNumPad6
KeyNumPad7 = _kovan.KeyNumPad7
KeyNumPad8 = _kovan.KeyNumPad8
KeyNumPad9 = _kovan.KeyNumPad9
KeyMultiply = _kovan.KeyMultiply
KeyAdd = _kovan.KeyAdd
KeySeparator = _kovan.KeySeparator
KeySubtract = _kovan.KeySubtract
KeyDecimal = _kovan.KeyDecimal
KeyDivide = _kovan.KeyDivide
KeyF1 = _kovan.KeyF1
KeyF2 = _kovan.KeyF2
KeyF3 = _kovan.KeyF3
KeyF4 = _kovan.KeyF4
KeyF5 = _kovan.KeyF5
KeyF6 = _kovan.KeyF6
KeyF7 = _kovan.KeyF7
KeyF8 = _kovan.KeyF8
KeyF9 = _kovan.KeyF9
KeyF10 = _kovan.KeyF10
KeyF11 = _kovan.KeyF11
KeyF12 = _kovan.KeyF12
KeyDelete = _kovan.KeyDelete
KeyNumLock = _kovan.KeyNumLock
KeyScrollLock = _kovan.KeyScrollLock
KeyPrintScreen = _kovan.KeyPrintScreen
KeyInsert = _kovan.KeyInsert
KeyHelp = _kovan.KeyHelp
KeyMeta = _kovan.KeyMeta
KeyBackQuote = _kovan.KeyBackQuote
KeyQuote = _kovan.KeyQuote
KeyFinal = _kovan.KeyFinal
KeyConvert = _kovan.KeyConvert
KeyNonConvert = _kovan.KeyNonConvert
KeyAccept = _kovan.KeyAccept
KeyModeChange = _kovan.KeyModeChange
KeyKana = _kovan.KeyKana
KeyKanji = _kovan.KeyKanji
KeyUndefined = _kovan.KeyUndefined

def graphics_open(*args):
  return _kovan.graphics_open(*args)
graphics_open = _kovan.graphics_open

def graphics_close():
  return _kovan.graphics_close()
graphics_close = _kovan.graphics_close

def graphics_update():
  return _kovan.graphics_update()
graphics_update = _kovan.graphics_update

def graphics_clear():
  return _kovan.graphics_clear()
graphics_clear = _kovan.graphics_clear

def graphics_blit(*args):
  return _kovan.graphics_blit(*args)
graphics_blit = _kovan.graphics_blit

def graphics_blit_region(*args):
  return _kovan.graphics_blit_region(*args)
graphics_blit_region = _kovan.graphics_blit_region

def graphics_blit_enc(*args):
  return _kovan.graphics_blit_enc(*args)
graphics_blit_enc = _kovan.graphics_blit_enc

def graphics_blit_region_enc(*args):
  return _kovan.graphics_blit_region_enc(*args)
graphics_blit_region_enc = _kovan.graphics_blit_region_enc

def graphics_fill(*args):
  return _kovan.graphics_fill(*args)
graphics_fill = _kovan.graphics_fill

def graphics_pixel(*args):
  return _kovan.graphics_pixel(*args)
graphics_pixel = _kovan.graphics_pixel

def graphics_line(*args):
  return _kovan.graphics_line(*args)
graphics_line = _kovan.graphics_line

def graphics_circle(*args):
  return _kovan.graphics_circle(*args)
graphics_circle = _kovan.graphics_circle

def graphics_circle_fill(*args):
  return _kovan.graphics_circle_fill(*args)
graphics_circle_fill = _kovan.graphics_circle_fill

def graphics_rectangle(*args):
  return _kovan.graphics_rectangle(*args)
graphics_rectangle = _kovan.graphics_rectangle

def graphics_rectangle_fill(*args):
  return _kovan.graphics_rectangle_fill(*args)
graphics_rectangle_fill = _kovan.graphics_rectangle_fill

def graphics_triangle(*args):
  return _kovan.graphics_triangle(*args)
graphics_triangle = _kovan.graphics_triangle

def graphics_triangle_fill(*args):
  return _kovan.graphics_triangle_fill(*args)
graphics_triangle_fill = _kovan.graphics_triangle_fill

def get_key_state(*args):
  return _kovan.get_key_state(*args)
get_key_state = _kovan.get_key_state

def get_mouse_position(*args):
  return _kovan.get_mouse_position(*args)
get_mouse_position = _kovan.get_mouse_position

def get_mouse_middle_button():
  return _kovan.get_mouse_middle_button()
get_mouse_middle_button = _kovan.get_mouse_middle_button

def get_mouse_left_button():
  return _kovan.get_mouse_left_button()
get_mouse_left_button = _kovan.get_mouse_left_button

def get_mouse_right_button():
  return _kovan.get_mouse_right_button()
get_mouse_right_button = _kovan.get_mouse_right_button
class Mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mutex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _kovan.new_Mutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_Mutex
    __del__ = lambda self : None;
    def lock(self): return _kovan.Mutex_lock(self)
    def tryLock(self): return _kovan.Mutex_tryLock(self)
    def unlock(self): return _kovan.Mutex_unlock(self)
Mutex_swigregister = _kovan.Mutex_swigregister
Mutex_swigregister(Mutex)

class Thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thread, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kovan.delete_Thread
    __del__ = lambda self : None;
    def start(self): return _kovan.Thread_start(self)
    def join(self): return _kovan.Thread_join(self)
    def run(self): return _kovan.Thread_run(self)
Thread_swigregister = _kovan.Thread_swigregister
Thread_swigregister(Thread)


def get_motor_position_counter(*args):
  return _kovan.get_motor_position_counter(*args)
get_motor_position_counter = _kovan.get_motor_position_counter

def gmpc(*args):
  return _kovan.gmpc(*args)
gmpc = _kovan.gmpc

def clear_motor_position_counter(*args):
  return _kovan.clear_motor_position_counter(*args)
clear_motor_position_counter = _kovan.clear_motor_position_counter

def cmpc(*args):
  return _kovan.cmpc(*args)
cmpc = _kovan.cmpc

def move_at_velocity(*args):
  return _kovan.move_at_velocity(*args)
move_at_velocity = _kovan.move_at_velocity

def mav(*args):
  return _kovan.mav(*args)
mav = _kovan.mav

def move_to_position(*args):
  return _kovan.move_to_position(*args)
move_to_position = _kovan.move_to_position

def mtp(*args):
  return _kovan.mtp(*args)
mtp = _kovan.mtp

def move_relative_position(*args):
  return _kovan.move_relative_position(*args)
move_relative_position = _kovan.move_relative_position

def mrp(*args):
  return _kovan.mrp(*args)
mrp = _kovan.mrp

def set_pid_gains(*args):
  return _kovan.set_pid_gains(*args)
set_pid_gains = _kovan.set_pid_gains

def get_pid_gains(*args):
  return _kovan.get_pid_gains(*args)
get_pid_gains = _kovan.get_pid_gains

def freeze(*args):
  return _kovan.freeze(*args)
freeze = _kovan.freeze

def get_motor_done(*args):
  return _kovan.get_motor_done(*args)
get_motor_done = _kovan.get_motor_done

def block_motor_done(*args):
  return _kovan.block_motor_done(*args)
block_motor_done = _kovan.block_motor_done

def bmd(*args):
  return _kovan.bmd(*args)
bmd = _kovan.bmd

def setpwm(*args):
  return _kovan.setpwm(*args)
setpwm = _kovan.setpwm

def getpwm(*args):
  return _kovan.getpwm(*args)
getpwm = _kovan.getpwm

def fd(*args):
  return _kovan.fd(*args)
fd = _kovan.fd

def bk(*args):
  return _kovan.bk(*args)
bk = _kovan.bk

def motor(*args):
  return _kovan.motor(*args)
motor = _kovan.motor

def off(*args):
  return _kovan.off(*args)
off = _kovan.off

def alloff():
  return _kovan.alloff()
alloff = _kovan.alloff

def ao():
  return _kovan.ao()
ao = _kovan.ao
class point2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _kovan.point2_x_set
    __swig_getmethods__["x"] = _kovan.point2_x_get
    if _newclass:x = _swig_property(_kovan.point2_x_get, _kovan.point2_x_set)
    __swig_setmethods__["y"] = _kovan.point2_y_set
    __swig_getmethods__["y"] = _kovan.point2_y_get
    if _newclass:y = _swig_property(_kovan.point2_y_get, _kovan.point2_y_set)
    def __init__(self): 
        this = _kovan.new_point2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_point2
    __del__ = lambda self : None;
point2_swigregister = _kovan.point2_swigregister
point2_swigregister(point2)

class point3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _kovan.point3_x_set
    __swig_getmethods__["x"] = _kovan.point3_x_get
    if _newclass:x = _swig_property(_kovan.point3_x_get, _kovan.point3_x_set)
    __swig_setmethods__["y"] = _kovan.point3_y_set
    __swig_getmethods__["y"] = _kovan.point3_y_get
    if _newclass:y = _swig_property(_kovan.point3_y_get, _kovan.point3_y_set)
    __swig_setmethods__["z"] = _kovan.point3_z_set
    __swig_getmethods__["z"] = _kovan.point3_z_get
    if _newclass:z = _swig_property(_kovan.point3_z_get, _kovan.point3_z_set)
    def __init__(self): 
        this = _kovan.new_point3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_point3
    __del__ = lambda self : None;
point3_swigregister = _kovan.point3_swigregister
point3_swigregister(point3)

class rectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rectangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ulx"] = _kovan.rectangle_ulx_set
    __swig_getmethods__["ulx"] = _kovan.rectangle_ulx_get
    if _newclass:ulx = _swig_property(_kovan.rectangle_ulx_get, _kovan.rectangle_ulx_set)
    __swig_setmethods__["uly"] = _kovan.rectangle_uly_set
    __swig_getmethods__["uly"] = _kovan.rectangle_uly_get
    if _newclass:uly = _swig_property(_kovan.rectangle_uly_get, _kovan.rectangle_uly_set)
    __swig_setmethods__["width"] = _kovan.rectangle_width_set
    __swig_getmethods__["width"] = _kovan.rectangle_width_get
    if _newclass:width = _swig_property(_kovan.rectangle_width_get, _kovan.rectangle_width_set)
    __swig_setmethods__["height"] = _kovan.rectangle_height_set
    __swig_getmethods__["height"] = _kovan.rectangle_height_get
    if _newclass:height = _swig_property(_kovan.rectangle_height_get, _kovan.rectangle_height_set)
    def __init__(self): 
        this = _kovan.new_rectangle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_rectangle
    __del__ = lambda self : None;
rectangle_swigregister = _kovan.rectangle_swigregister
rectangle_swigregister(rectangle)


def create_point2(*args):
  return _kovan.create_point2(*args)
create_point2 = _kovan.create_point2

def create_point3(*args):
  return _kovan.create_point3(*args)
create_point3 = _kovan.create_point3

def create_rectangle(*args):
  return _kovan.create_rectangle(*args)
create_rectangle = _kovan.create_rectangle

def enable_servo(*args):
  return _kovan.enable_servo(*args)
enable_servo = _kovan.enable_servo

def disable_servo(*args):
  return _kovan.disable_servo(*args)
disable_servo = _kovan.disable_servo

def enable_servos():
  return _kovan.enable_servos()
enable_servos = _kovan.enable_servos

def disable_servos():
  return _kovan.disable_servos()
disable_servos = _kovan.disable_servos

def set_servo_enabled(*args):
  return _kovan.set_servo_enabled(*args)
set_servo_enabled = _kovan.set_servo_enabled

def get_servo_enabled(*args):
  return _kovan.get_servo_enabled(*args)
get_servo_enabled = _kovan.get_servo_enabled

def get_servo_position(*args):
  return _kovan.get_servo_position(*args)
get_servo_position = _kovan.get_servo_position

def set_servo_position(*args):
  return _kovan.set_servo_position(*args)
set_servo_position = _kovan.set_servo_position

def msleep(*args):
  return _kovan.msleep(*args)
msleep = _kovan.msleep

def systime():
  return _kovan.systime()
systime = _kovan.systime

def seconds():
  return _kovan.seconds()
seconds = _kovan.seconds
Baud57600 = _kovan.Baud57600
Baud115200 = _kovan.Baud115200

def create_connect():
  return _kovan.create_connect()
create_connect = _kovan.create_connect

def create_connect_once():
  return _kovan.create_connect_once()
create_connect_once = _kovan.create_connect_once

def create_disconnect():
  return _kovan.create_disconnect()
create_disconnect = _kovan.create_disconnect

def create_start():
  return _kovan.create_start()
create_start = _kovan.create_start

def create_passive():
  return _kovan.create_passive()
create_passive = _kovan.create_passive

def create_safe():
  return _kovan.create_safe()
create_safe = _kovan.create_safe

def create_full():
  return _kovan.create_full()
create_full = _kovan.create_full

def create_spot():
  return _kovan.create_spot()
create_spot = _kovan.create_spot

def create_cover():
  return _kovan.create_cover()
create_cover = _kovan.create_cover

def create_demo(*args):
  return _kovan.create_demo(*args)
create_demo = _kovan.create_demo

def create_cover_dock():
  return _kovan.create_cover_dock()
create_cover_dock = _kovan.create_cover_dock

def get_create_mode():
  return _kovan.get_create_mode()
get_create_mode = _kovan.get_create_mode

def get_create_lbump():
  return _kovan.get_create_lbump()
get_create_lbump = _kovan.get_create_lbump

def get_create_rbump():
  return _kovan.get_create_rbump()
get_create_rbump = _kovan.get_create_rbump

def get_create_lwdrop():
  return _kovan.get_create_lwdrop()
get_create_lwdrop = _kovan.get_create_lwdrop

def get_create_cwdrop():
  return _kovan.get_create_cwdrop()
get_create_cwdrop = _kovan.get_create_cwdrop

def get_create_rwdrop():
  return _kovan.get_create_rwdrop()
get_create_rwdrop = _kovan.get_create_rwdrop

def get_create_wall():
  return _kovan.get_create_wall()
get_create_wall = _kovan.get_create_wall

def get_create_lcliff():
  return _kovan.get_create_lcliff()
get_create_lcliff = _kovan.get_create_lcliff

def get_create_lfcliff():
  return _kovan.get_create_lfcliff()
get_create_lfcliff = _kovan.get_create_lfcliff

def get_create_rfcliff():
  return _kovan.get_create_rfcliff()
get_create_rfcliff = _kovan.get_create_rfcliff

def get_create_rcliff():
  return _kovan.get_create_rcliff()
get_create_rcliff = _kovan.get_create_rcliff

def get_create_vwall():
  return _kovan.get_create_vwall()
get_create_vwall = _kovan.get_create_vwall

def get_create_overcurrents():
  return _kovan.get_create_overcurrents()
get_create_overcurrents = _kovan.get_create_overcurrents

def get_create_infrared():
  return _kovan.get_create_infrared()
get_create_infrared = _kovan.get_create_infrared

def get_create_advance_button():
  return _kovan.get_create_advance_button()
get_create_advance_button = _kovan.get_create_advance_button

def get_create_play_button():
  return _kovan.get_create_play_button()
get_create_play_button = _kovan.get_create_play_button

def get_create_normalized_angle():
  return _kovan.get_create_normalized_angle()
get_create_normalized_angle = _kovan.get_create_normalized_angle

def set_create_normalized_angle(*args):
  return _kovan.set_create_normalized_angle(*args)
set_create_normalized_angle = _kovan.set_create_normalized_angle

def get_create_total_angle():
  return _kovan.get_create_total_angle()
get_create_total_angle = _kovan.get_create_total_angle

def set_create_total_angle(*args):
  return _kovan.set_create_total_angle(*args)
set_create_total_angle = _kovan.set_create_total_angle

def get_create_distance():
  return _kovan.get_create_distance()
get_create_distance = _kovan.get_create_distance

def set_create_distance(*args):
  return _kovan.set_create_distance(*args)
set_create_distance = _kovan.set_create_distance

def get_create_battery_charging_state():
  return _kovan.get_create_battery_charging_state()
get_create_battery_charging_state = _kovan.get_create_battery_charging_state

def get_create_battery_voltage():
  return _kovan.get_create_battery_voltage()
get_create_battery_voltage = _kovan.get_create_battery_voltage

def get_create_battery_current():
  return _kovan.get_create_battery_current()
get_create_battery_current = _kovan.get_create_battery_current

def get_create_battery_temp():
  return _kovan.get_create_battery_temp()
get_create_battery_temp = _kovan.get_create_battery_temp

def get_create_battery_charge():
  return _kovan.get_create_battery_charge()
get_create_battery_charge = _kovan.get_create_battery_charge

def get_create_battery_capacity():
  return _kovan.get_create_battery_capacity()
get_create_battery_capacity = _kovan.get_create_battery_capacity

def get_create_wall_amt():
  return _kovan.get_create_wall_amt()
get_create_wall_amt = _kovan.get_create_wall_amt

def get_create_lcliff_amt():
  return _kovan.get_create_lcliff_amt()
get_create_lcliff_amt = _kovan.get_create_lcliff_amt

def get_create_lfcliff_amt():
  return _kovan.get_create_lfcliff_amt()
get_create_lfcliff_amt = _kovan.get_create_lfcliff_amt

def get_create_rfcliff_amt():
  return _kovan.get_create_rfcliff_amt()
get_create_rfcliff_amt = _kovan.get_create_rfcliff_amt

def get_create_rcliff_amt():
  return _kovan.get_create_rcliff_amt()
get_create_rcliff_amt = _kovan.get_create_rcliff_amt

def get_create_bay_DI():
  return _kovan.get_create_bay_DI()
get_create_bay_DI = _kovan.get_create_bay_DI

def get_create_bay_AI():
  return _kovan.get_create_bay_AI()
get_create_bay_AI = _kovan.get_create_bay_AI

def get_create_song_number():
  return _kovan.get_create_song_number()
get_create_song_number = _kovan.get_create_song_number

def get_create_song_playing():
  return _kovan.get_create_song_playing()
get_create_song_playing = _kovan.get_create_song_playing

def get_create_number_of_stream_packets():
  return _kovan.get_create_number_of_stream_packets()
get_create_number_of_stream_packets = _kovan.get_create_number_of_stream_packets

def get_create_requested_velocity():
  return _kovan.get_create_requested_velocity()
get_create_requested_velocity = _kovan.get_create_requested_velocity

def get_create_requested_radius():
  return _kovan.get_create_requested_radius()
get_create_requested_radius = _kovan.get_create_requested_radius

def get_create_requested_right_velocity():
  return _kovan.get_create_requested_right_velocity()
get_create_requested_right_velocity = _kovan.get_create_requested_right_velocity

def get_create_requested_left_velocity():
  return _kovan.get_create_requested_left_velocity()
get_create_requested_left_velocity = _kovan.get_create_requested_left_velocity

def create_stop():
  return _kovan.create_stop()
create_stop = _kovan.create_stop

def create_drive(*args):
  return _kovan.create_drive(*args)
create_drive = _kovan.create_drive

def create_drive_straight(*args):
  return _kovan.create_drive_straight(*args)
create_drive_straight = _kovan.create_drive_straight

def create_spin_CW(*args):
  return _kovan.create_spin_CW(*args)
create_spin_CW = _kovan.create_spin_CW

def create_spin_CCW(*args):
  return _kovan.create_spin_CCW(*args)
create_spin_CCW = _kovan.create_spin_CCW

def create_drive_direct(*args):
  return _kovan.create_drive_direct(*args)
create_drive_direct = _kovan.create_drive_direct

def create_spin_block(*args):
  return _kovan.create_spin_block(*args)
create_spin_block = _kovan.create_spin_block

def _create_get_raw_encoders(*args):
  return _kovan._create_get_raw_encoders(*args)
_create_get_raw_encoders = _kovan._create_get_raw_encoders

def create_advance_led(*args):
  return _kovan.create_advance_led(*args)
create_advance_led = _kovan.create_advance_led

def create_play_led(*args):
  return _kovan.create_play_led(*args)
create_play_led = _kovan.create_play_led

def create_power_led(*args):
  return _kovan.create_power_led(*args)
create_power_led = _kovan.create_power_led

def create_digital_output(*args):
  return _kovan.create_digital_output(*args)
create_digital_output = _kovan.create_digital_output

def create_pwm_low_side_drivers(*args):
  return _kovan.create_pwm_low_side_drivers(*args)
create_pwm_low_side_drivers = _kovan.create_pwm_low_side_drivers

def create_low_side_drivers(*args):
  return _kovan.create_low_side_drivers(*args)
create_low_side_drivers = _kovan.create_low_side_drivers

def create_load_song(*args):
  return _kovan.create_load_song(*args)
create_load_song = _kovan.create_load_song

def create_play_song(*args):
  return _kovan.create_play_song(*args)
create_play_song = _kovan.create_play_song

def create_read_block(*args):
  return _kovan.create_read_block(*args)
create_read_block = _kovan.create_read_block

def create_write_byte(*args):
  return _kovan.create_write_byte(*args)
create_write_byte = _kovan.create_write_byte

def create_clear_serial_buffer():
  return _kovan.create_clear_serial_buffer()
create_clear_serial_buffer = _kovan.create_clear_serial_buffer

def get_create_baud_rate():
  return _kovan.get_create_baud_rate()
get_create_baud_rate = _kovan.get_create_baud_rate

def set_create_baud_rate(*args):
  return _kovan.set_create_baud_rate(*args)
set_create_baud_rate = _kovan.set_create_baud_rate
SORT_NEAREST = _kovan.SORT_NEAREST
SORT_CENTER = _kovan.SORT_CENTER
SORT_FARTHEST = _kovan.SORT_FARTHEST

def depth_open():
  return _kovan.depth_open()
depth_open = _kovan.depth_open

def depth_close():
  return _kovan.depth_close()
depth_close = _kovan.depth_close

def get_depth_resolution():
  return _kovan.get_depth_resolution()
get_depth_resolution = _kovan.get_depth_resolution

def set_depth_resolution(*args):
  return _kovan.set_depth_resolution(*args)
set_depth_resolution = _kovan.set_depth_resolution

def set_depth_orientation(*args):
  return _kovan.set_depth_orientation(*args)
set_depth_orientation = _kovan.set_depth_orientation

def get_depth_orientation():
  return _kovan.get_depth_orientation()
get_depth_orientation = _kovan.get_depth_orientation

def depth_update():
  return _kovan.depth_update()
depth_update = _kovan.depth_update

def get_depth_image_height():
  return _kovan.get_depth_image_height()
get_depth_image_height = _kovan.get_depth_image_height

def get_depth_image_width():
  return _kovan.get_depth_image_width()
get_depth_image_width = _kovan.get_depth_image_width

def get_depth_value(*args):
  return _kovan.get_depth_value(*args)
get_depth_value = _kovan.get_depth_value

def get_depth_world_point(*args):
  return _kovan.get_depth_world_point(*args)
get_depth_world_point = _kovan.get_depth_world_point

def get_depth_world_point_x(*args):
  return _kovan.get_depth_world_point_x(*args)
get_depth_world_point_x = _kovan.get_depth_world_point_x

def get_depth_world_point_y(*args):
  return _kovan.get_depth_world_point_y(*args)
get_depth_world_point_y = _kovan.get_depth_world_point_y

def get_depth_world_point_z(*args):
  return _kovan.get_depth_world_point_z(*args)
get_depth_world_point_z = _kovan.get_depth_world_point_z

def depth_scanline_update(*args):
  return _kovan.depth_scanline_update(*args)
depth_scanline_update = _kovan.depth_scanline_update

def get_depth_scanline_object_count():
  return _kovan.get_depth_scanline_object_count()
get_depth_scanline_object_count = _kovan.get_depth_scanline_object_count

def get_depth_scanline_object_center(*args):
  return _kovan.get_depth_scanline_object_center(*args)
get_depth_scanline_object_center = _kovan.get_depth_scanline_object_center

def get_depth_scanline_object_center_x(*args):
  return _kovan.get_depth_scanline_object_center_x(*args)
get_depth_scanline_object_center_x = _kovan.get_depth_scanline_object_center_x

def get_depth_scanline_object_center_y(*args):
  return _kovan.get_depth_scanline_object_center_y(*args)
get_depth_scanline_object_center_y = _kovan.get_depth_scanline_object_center_y

def get_depth_scanline_object_center_z(*args):
  return _kovan.get_depth_scanline_object_center_z(*args)
get_depth_scanline_object_center_z = _kovan.get_depth_scanline_object_center_z

def get_depth_scanline_object_nearest(*args):
  return _kovan.get_depth_scanline_object_nearest(*args)
get_depth_scanline_object_nearest = _kovan.get_depth_scanline_object_nearest

def get_depth_scanline_object_nearest_x(*args):
  return _kovan.get_depth_scanline_object_nearest_x(*args)
get_depth_scanline_object_nearest_x = _kovan.get_depth_scanline_object_nearest_x

def get_depth_scanline_object_nearest_y(*args):
  return _kovan.get_depth_scanline_object_nearest_y(*args)
get_depth_scanline_object_nearest_y = _kovan.get_depth_scanline_object_nearest_y

def get_depth_scanline_object_nearest_z(*args):
  return _kovan.get_depth_scanline_object_nearest_z(*args)
get_depth_scanline_object_nearest_z = _kovan.get_depth_scanline_object_nearest_z

def get_depth_scanline_object_farthest(*args):
  return _kovan.get_depth_scanline_object_farthest(*args)
get_depth_scanline_object_farthest = _kovan.get_depth_scanline_object_farthest

def get_depth_scanline_object_farthest_x(*args):
  return _kovan.get_depth_scanline_object_farthest_x(*args)
get_depth_scanline_object_farthest_x = _kovan.get_depth_scanline_object_farthest_x

def get_depth_scanline_object_farthest_y(*args):
  return _kovan.get_depth_scanline_object_farthest_y(*args)
get_depth_scanline_object_farthest_y = _kovan.get_depth_scanline_object_farthest_y

def get_depth_scanline_object_farthest_z(*args):
  return _kovan.get_depth_scanline_object_farthest_z(*args)
get_depth_scanline_object_farthest_z = _kovan.get_depth_scanline_object_farthest_z

def get_depth_scanline_object_size(*args):
  return _kovan.get_depth_scanline_object_size(*args)
get_depth_scanline_object_size = _kovan.get_depth_scanline_object_size

def get_depth_scanline_object_angle(*args):
  return _kovan.get_depth_scanline_object_angle(*args)
get_depth_scanline_object_angle = _kovan.get_depth_scanline_object_angle

def set_depth_scanline_sorting_method(*args):
  return _kovan.set_depth_scanline_sorting_method(*args)
set_depth_scanline_sorting_method = _kovan.set_depth_scanline_sorting_method

def get_depth_scanline_sorting_method():
  return _kovan.get_depth_scanline_sorting_method()
get_depth_scanline_sorting_method = _kovan.get_depth_scanline_sorting_method

def battery_charging():
  return _kovan.battery_charging()
battery_charging = _kovan.battery_charging

def power_level():
  return _kovan.power_level()
power_level = _kovan.power_level

def analog(*args):
  return _kovan.analog(*args)
analog = _kovan.analog

def analog10(*args):
  return _kovan.analog10(*args)
analog10 = _kovan.analog10

def analog_et(*args):
  return _kovan.analog_et(*args)
analog_et = _kovan.analog_et

def analog8(*args):
  return _kovan.analog8(*args)
analog8 = _kovan.analog8

def set_analog_pullup(*args):
  return _kovan.set_analog_pullup(*args)
set_analog_pullup = _kovan.set_analog_pullup

def get_analog_pullup(*args):
  return _kovan.get_analog_pullup(*args)
get_analog_pullup = _kovan.get_analog_pullup

def set_auto_publish(*args):
  return _kovan.set_auto_publish(*args)
set_auto_publish = _kovan.set_auto_publish

def publish():
  return _kovan.publish()
publish = _kovan.publish

def halt():
  return _kovan.halt()
halt = _kovan.halt

def freeze_halt():
  return _kovan.freeze_halt()
freeze_halt = _kovan.freeze_halt

def accel_x():
  return _kovan.accel_x()
accel_x = _kovan.accel_x

def accel_y():
  return _kovan.accel_y()
accel_y = _kovan.accel_y

def accel_z():
  return _kovan.accel_z()
accel_z = _kovan.accel_z

def accel_calibrate():
  return _kovan.accel_calibrate()
accel_calibrate = _kovan.accel_calibrate
class pixel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pixel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _kovan.pixel_r_set
    __swig_getmethods__["r"] = _kovan.pixel_r_get
    if _newclass:r = _swig_property(_kovan.pixel_r_get, _kovan.pixel_r_set)
    __swig_setmethods__["g"] = _kovan.pixel_g_set
    __swig_getmethods__["g"] = _kovan.pixel_g_get
    if _newclass:g = _swig_property(_kovan.pixel_g_get, _kovan.pixel_g_set)
    __swig_setmethods__["b"] = _kovan.pixel_b_set
    __swig_getmethods__["b"] = _kovan.pixel_b_get
    if _newclass:b = _swig_property(_kovan.pixel_b_get, _kovan.pixel_b_set)
    def __init__(self): 
        this = _kovan.new_pixel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_pixel
    __del__ = lambda self : None;
pixel_swigregister = _kovan.pixel_swigregister
pixel_swigregister(pixel)
INVALID_DEPTH = cvar.INVALID_DEPTH

LOW_RES = _kovan.LOW_RES
MED_RES = _kovan.MED_RES
HIGH_RES = _kovan.HIGH_RES
NATIVE_RES = _kovan.NATIVE_RES

def camera_open():
  return _kovan.camera_open()
camera_open = _kovan.camera_open

def camera_open_at_res(*args):
  return _kovan.camera_open_at_res(*args)
camera_open_at_res = _kovan.camera_open_at_res

def camera_open_device(*args):
  return _kovan.camera_open_device(*args)
camera_open_device = _kovan.camera_open_device

def camera_load_config(*args):
  return _kovan.camera_load_config(*args)
camera_load_config = _kovan.camera_load_config

def set_camera_width(*args):
  return _kovan.set_camera_width(*args)
set_camera_width = _kovan.set_camera_width

def set_camera_height(*args):
  return _kovan.set_camera_height(*args)
set_camera_height = _kovan.set_camera_height

def get_camera_width():
  return _kovan.get_camera_width()
get_camera_width = _kovan.get_camera_width

def get_camera_height():
  return _kovan.get_camera_height()
get_camera_height = _kovan.get_camera_height

def camera_update():
  return _kovan.camera_update()
camera_update = _kovan.camera_update

def get_camera_pixel(*args):
  return _kovan.get_camera_pixel(*args)
get_camera_pixel = _kovan.get_camera_pixel

def get_channel_count():
  return _kovan.get_channel_count()
get_channel_count = _kovan.get_channel_count

def get_object_count(*args):
  return _kovan.get_object_count(*args)
get_object_count = _kovan.get_object_count

def get_object_data(*args):
  return _kovan.get_object_data(*args)
get_object_data = _kovan.get_object_data

def get_code_num(*args):
  return _kovan.get_code_num(*args)
get_code_num = _kovan.get_code_num

def get_object_data_length(*args):
  return _kovan.get_object_data_length(*args)
get_object_data_length = _kovan.get_object_data_length

def get_object_confidence(*args):
  return _kovan.get_object_confidence(*args)
get_object_confidence = _kovan.get_object_confidence

def get_object_area(*args):
  return _kovan.get_object_area(*args)
get_object_area = _kovan.get_object_area

def get_object_bbox(*args):
  return _kovan.get_object_bbox(*args)
get_object_bbox = _kovan.get_object_bbox

def get_object_bbox_ulx(*args):
  return _kovan.get_object_bbox_ulx(*args)
get_object_bbox_ulx = _kovan.get_object_bbox_ulx

def get_object_bbox_uly(*args):
  return _kovan.get_object_bbox_uly(*args)
get_object_bbox_uly = _kovan.get_object_bbox_uly

def get_object_bbox_brx(*args):
  return _kovan.get_object_bbox_brx(*args)
get_object_bbox_brx = _kovan.get_object_bbox_brx

def get_object_bbox_bry(*args):
  return _kovan.get_object_bbox_bry(*args)
get_object_bbox_bry = _kovan.get_object_bbox_bry

def get_object_bbox_width(*args):
  return _kovan.get_object_bbox_width(*args)
get_object_bbox_width = _kovan.get_object_bbox_width

def get_object_bbox_height(*args):
  return _kovan.get_object_bbox_height(*args)
get_object_bbox_height = _kovan.get_object_bbox_height

def get_object_centroid(*args):
  return _kovan.get_object_centroid(*args)
get_object_centroid = _kovan.get_object_centroid

def get_object_centroid_column(*args):
  return _kovan.get_object_centroid_column(*args)
get_object_centroid_column = _kovan.get_object_centroid_column

def get_object_centroid_x(*args):
  return _kovan.get_object_centroid_x(*args)
get_object_centroid_x = _kovan.get_object_centroid_x

def get_object_centroid_row(*args):
  return _kovan.get_object_centroid_row(*args)
get_object_centroid_row = _kovan.get_object_centroid_row

def get_object_centroid_y(*args):
  return _kovan.get_object_centroid_y(*args)
get_object_centroid_y = _kovan.get_object_centroid_y

def get_object_center(*args):
  return _kovan.get_object_center(*args)
get_object_center = _kovan.get_object_center

def get_object_center_column(*args):
  return _kovan.get_object_center_column(*args)
get_object_center_column = _kovan.get_object_center_column

def get_object_center_x(*args):
  return _kovan.get_object_center_x(*args)
get_object_center_x = _kovan.get_object_center_x

def get_object_center_row(*args):
  return _kovan.get_object_center_row(*args)
get_object_center_row = _kovan.get_object_center_row

def get_object_center_y(*args):
  return _kovan.get_object_center_y(*args)
get_object_center_y = _kovan.get_object_center_y

def camera_close():
  return _kovan.camera_close()
camera_close = _kovan.camera_close

def set_camera_config_base_path(*args):
  return _kovan.set_camera_config_base_path(*args)
set_camera_config_base_path = _kovan.set_camera_config_base_path

def get_camera_frame_row(*args):
  return _kovan.get_camera_frame_row(*args)
get_camera_frame_row = _kovan.get_camera_frame_row

def get_camera_frame():
  return _kovan.get_camera_frame()
get_camera_frame = _kovan.get_camera_frame

def get_camera_element_size():
  return _kovan.get_camera_element_size()
get_camera_element_size = _kovan.get_camera_element_size

def set_a_button_text(*args):
  return _kovan.set_a_button_text(*args)
set_a_button_text = _kovan.set_a_button_text

def set_b_button_text(*args):
  return _kovan.set_b_button_text(*args)
set_b_button_text = _kovan.set_b_button_text

def set_c_button_text(*args):
  return _kovan.set_c_button_text(*args)
set_c_button_text = _kovan.set_c_button_text

def set_x_button_text(*args):
  return _kovan.set_x_button_text(*args)
set_x_button_text = _kovan.set_x_button_text

def set_y_button_text(*args):
  return _kovan.set_y_button_text(*args)
set_y_button_text = _kovan.set_y_button_text

def set_z_button_text(*args):
  return _kovan.set_z_button_text(*args)
set_z_button_text = _kovan.set_z_button_text

def a_button():
  return _kovan.a_button()
a_button = _kovan.a_button

def b_button():
  return _kovan.b_button()
b_button = _kovan.b_button

def c_button():
  return _kovan.c_button()
c_button = _kovan.c_button

def x_button():
  return _kovan.x_button()
x_button = _kovan.x_button

def y_button():
  return _kovan.y_button()
y_button = _kovan.y_button

def z_button():
  return _kovan.z_button()
z_button = _kovan.z_button

def side_button():
  return _kovan.side_button()
side_button = _kovan.side_button

def black_button():
  return _kovan.black_button()
black_button = _kovan.black_button

def a_button_clicked():
  return _kovan.a_button_clicked()
a_button_clicked = _kovan.a_button_clicked

def b_button_clicked():
  return _kovan.b_button_clicked()
b_button_clicked = _kovan.b_button_clicked

def c_button_clicked():
  return _kovan.c_button_clicked()
c_button_clicked = _kovan.c_button_clicked

def x_button_clicked():
  return _kovan.x_button_clicked()
x_button_clicked = _kovan.x_button_clicked

def y_button_clicked():
  return _kovan.y_button_clicked()
y_button_clicked = _kovan.y_button_clicked

def z_button_clicked():
  return _kovan.z_button_clicked()
z_button_clicked = _kovan.z_button_clicked

def side_button_clicked():
  return _kovan.side_button_clicked()
side_button_clicked = _kovan.side_button_clicked

def any_button():
  return _kovan.any_button()
any_button = _kovan.any_button

def extra_buttons_show():
  return _kovan.extra_buttons_show()
extra_buttons_show = _kovan.extra_buttons_show

def extra_buttons_hide():
  return _kovan.extra_buttons_hide()
extra_buttons_hide = _kovan.extra_buttons_hide

def get_extra_buttons_visible():
  return _kovan.get_extra_buttons_visible()
get_extra_buttons_visible = _kovan.get_extra_buttons_visible

def set_extra_buttons_visible(*args):
  return _kovan.set_extra_buttons_visible(*args)
set_extra_buttons_visible = _kovan.set_extra_buttons_visible
FRONT_CAMERA = _kovan.FRONT_CAMERA
BOTTOM_CAMERA = _kovan.BOTTOM_CAMERA

def drone_connect():
  return _kovan.drone_connect()
drone_connect = _kovan.drone_connect

def drone_disconnect():
  return _kovan.drone_disconnect()
drone_disconnect = _kovan.drone_disconnect

def drone_calibrate():
  return _kovan.drone_calibrate()
drone_calibrate = _kovan.drone_calibrate

def get_drone_version():
  return _kovan.get_drone_version()
get_drone_version = _kovan.get_drone_version

def drone_takeoff():
  return _kovan.drone_takeoff()
drone_takeoff = _kovan.drone_takeoff

def drone_land():
  return _kovan.drone_land()
drone_land = _kovan.drone_land

def get_drone_battery():
  return _kovan.get_drone_battery()
get_drone_battery = _kovan.get_drone_battery

def drone_clear_position():
  return _kovan.drone_clear_position()
drone_clear_position = _kovan.drone_clear_position

def get_drone_x():
  return _kovan.get_drone_x()
get_drone_x = _kovan.get_drone_x

def get_drone_y():
  return _kovan.get_drone_y()
get_drone_y = _kovan.get_drone_y

def get_drone_z():
  return _kovan.get_drone_z()
get_drone_z = _kovan.get_drone_z

def get_drone_x_velocity():
  return _kovan.get_drone_x_velocity()
get_drone_x_velocity = _kovan.get_drone_x_velocity

def get_drone_y_velocity():
  return _kovan.get_drone_y_velocity()
get_drone_y_velocity = _kovan.get_drone_y_velocity

def get_drone_z_velocity():
  return _kovan.get_drone_z_velocity()
get_drone_z_velocity = _kovan.get_drone_z_velocity

def get_drone_pitch():
  return _kovan.get_drone_pitch()
get_drone_pitch = _kovan.get_drone_pitch

def get_drone_roll():
  return _kovan.get_drone_roll()
get_drone_roll = _kovan.get_drone_roll

def get_drone_yaw():
  return _kovan.get_drone_yaw()
get_drone_yaw = _kovan.get_drone_yaw

def get_drone_altitude():
  return _kovan.get_drone_altitude()
get_drone_altitude = _kovan.get_drone_altitude

def drone_camera_open(*args):
  return _kovan.drone_camera_open(*args)
drone_camera_open = _kovan.drone_camera_open

def set_drone_mac_address(*args):
  return _kovan.set_drone_mac_address(*args)
set_drone_mac_address = _kovan.set_drone_mac_address

def drone_pair():
  return _kovan.drone_pair()
drone_pair = _kovan.drone_pair

def set_drone_ssid(*args):
  return _kovan.set_drone_ssid(*args)
set_drone_ssid = _kovan.set_drone_ssid

def drone_move(*args):
  return _kovan.drone_move(*args)
drone_move = _kovan.drone_move

def drone_hover():
  return _kovan.drone_hover()
drone_hover = _kovan.drone_hover

def set_drone_emergency_stop_enabled(*args):
  return _kovan.set_drone_emergency_stop_enabled(*args)
set_drone_emergency_stop_enabled = _kovan.set_drone_emergency_stop_enabled

def get_drone_emergency_stop_enabled():
  return _kovan.get_drone_emergency_stop_enabled()
get_drone_emergency_stop_enabled = _kovan.get_drone_emergency_stop_enabled

def datalog_remove_category(*args):
  return _kovan.datalog_remove_category(*args)
datalog_remove_category = _kovan.datalog_remove_category

def datalog_append_string(*args):
  return _kovan.datalog_append_string(*args)
datalog_append_string = _kovan.datalog_append_string

def datalog_append_number(*args):
  return _kovan.datalog_append_number(*args)
datalog_append_number = _kovan.datalog_append_number

def datalog_remove(*args):
  return _kovan.datalog_remove(*args)
datalog_remove = _kovan.datalog_remove

def datalog_write_plain(*args):
  return _kovan.datalog_write_plain(*args)
datalog_write_plain = _kovan.datalog_write_plain

def datalog_write_csv(*args):
  return _kovan.datalog_write_csv(*args)
datalog_write_csv = _kovan.datalog_write_csv

def datalog_clear():
  return _kovan.datalog_clear()
datalog_clear = _kovan.datalog_clear

def console_clear():
  return _kovan.console_clear()
console_clear = _kovan.console_clear

def beep():
  return _kovan.beep()
beep = _kovan.beep
class mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mutex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _kovan.mutex_data_set
    __swig_getmethods__["data"] = _kovan.mutex_data_get
    if _newclass:data = _swig_property(_kovan.mutex_data_get, _kovan.mutex_data_set)
    def __init__(self): 
        this = _kovan.new_mutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_mutex
    __del__ = lambda self : None;
mutex_swigregister = _kovan.mutex_swigregister
mutex_swigregister(mutex)

class thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, thread, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _kovan.thread_data_set
    __swig_getmethods__["data"] = _kovan.thread_data_get
    if _newclass:data = _swig_property(_kovan.thread_data_get, _kovan.thread_data_set)
    def __init__(self): 
        this = _kovan.new_thread()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_thread
    __del__ = lambda self : None;
thread_swigregister = _kovan.thread_swigregister
thread_swigregister(thread)


def mutex_create():
  return _kovan.mutex_create()
mutex_create = _kovan.mutex_create

def mutex_lock(*args):
  return _kovan.mutex_lock(*args)
mutex_lock = _kovan.mutex_lock

def mutex_trylock(*args):
  return _kovan.mutex_trylock(*args)
mutex_trylock = _kovan.mutex_trylock

def mutex_unlock(*args):
  return _kovan.mutex_unlock(*args)
mutex_unlock = _kovan.mutex_unlock

def mutex_destroy(*args):
  return _kovan.mutex_destroy(*args)
mutex_destroy = _kovan.mutex_destroy

def thread_create(*args):
  return _kovan.thread_create(*args)
thread_create = _kovan.thread_create

def thread_start(*args):
  return _kovan.thread_start(*args)
thread_start = _kovan.thread_start

def thread_wait(*args):
  return _kovan.thread_wait(*args)
thread_wait = _kovan.thread_wait

def thread_destroy(*args):
  return _kovan.thread_destroy(*args)
thread_destroy = _kovan.thread_destroy

def digital(*args):
  return _kovan.digital(*args)
digital = _kovan.digital

def set_digital_value(*args):
  return _kovan.set_digital_value(*args)
set_digital_value = _kovan.set_digital_value

def get_digital_value(*args):
  return _kovan.get_digital_value(*args)
get_digital_value = _kovan.get_digital_value

def set_digital_output(*args):
  return _kovan.set_digital_output(*args)
set_digital_output = _kovan.set_digital_output

def get_digital_output(*args):
  return _kovan.get_digital_output(*args)
get_digital_output = _kovan.get_digital_output

def get_digital_pullup(*args):
  return _kovan.get_digital_pullup(*args)
get_digital_pullup = _kovan.get_digital_pullup

def set_digital_pullup(*args):
  return _kovan.set_digital_pullup(*args)
set_digital_pullup = _kovan.set_digital_pullup
class PidGains(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PidGains, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PidGains, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _kovan.PidGains_p_set
    __swig_getmethods__["p"] = _kovan.PidGains_p_get
    if _newclass:p = _swig_property(_kovan.PidGains_p_get, _kovan.PidGains_p_set)
    __swig_setmethods__["i"] = _kovan.PidGains_i_set
    __swig_getmethods__["i"] = _kovan.PidGains_i_get
    if _newclass:i = _swig_property(_kovan.PidGains_i_get, _kovan.PidGains_i_set)
    __swig_setmethods__["d"] = _kovan.PidGains_d_set
    __swig_getmethods__["d"] = _kovan.PidGains_d_get
    if _newclass:d = _swig_property(_kovan.PidGains_d_get, _kovan.PidGains_d_set)
    __swig_setmethods__["pd"] = _kovan.PidGains_pd_set
    __swig_getmethods__["pd"] = _kovan.PidGains_pd_get
    if _newclass:pd = _swig_property(_kovan.PidGains_pd_get, _kovan.PidGains_pd_set)
    __swig_setmethods__["id"] = _kovan.PidGains_id_set
    __swig_getmethods__["id"] = _kovan.PidGains_id_get
    if _newclass:id = _swig_property(_kovan.PidGains_id_get, _kovan.PidGains_id_set)
    __swig_setmethods__["dd"] = _kovan.PidGains_dd_set
    __swig_getmethods__["dd"] = _kovan.PidGains_dd_get
    if _newclass:dd = _swig_property(_kovan.PidGains_dd_get, _kovan.PidGains_dd_set)
    def __init__(self): 
        this = _kovan.new_PidGains()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kovan.delete_PidGains
    __del__ = lambda self : None;
PidGains_swigregister = _kovan.PidGains_swigregister
PidGains_swigregister(PidGains)



